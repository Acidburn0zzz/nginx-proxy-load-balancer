#!/bin/bash

while read line2; do unset "$line2"; done < <(compgen -A variable | grep "auto_config")

while getopts ":u:d:s:S:h:n:D:" opt; do
  case $opt in
    u)
      auto_config_upstream=$(strip_quotes "$OPTARG");;
    D)
      auto_config_domain=$(strip_quotes "$OPTARG");;
    d)
      auto_config_directory=$(strip_quotes "$OPTARG");;
    s)
      auto_config_ssl=$(strip_quotes "$OPTARG");;
    S)
      auto_config_ssl_source=$(strip_quotes "$OPTARG");;
    h)
      auto_config_https_only=$(strip_quotes "$OPTARG");;
    n)
      auto_config_name=$(strip_quotes "$OPTARG");;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

function configure_the_config(){
#set up variables and load defaults
[[ ! -z "$auto_config_directory" ]] || auto_config_directory="$DEFAULT_DIRECTORY" 
[[ ! -z "$auto_config_ssl" ]] || auto_config_ssl="$DEFAULT_SSL" 
[[ ! -z "$auto_config_ssl_source" ]] || auto_config_ssl_source="$DEFAULT_SSL_SOURCE"
[[ ! -z "$auto_config_https_only" ]] || auto_config_https_only="$DEFAULT_HTTPS_ONLY"
[[ ! -z "$auto_config_name" ]] || auto_config_name="$auto_config_domain"

if [[ -z "$auto_config_upstream" ]]; then
	echo "no upstream specified";
	exit 1
fi

if [[ -z "$auto_config_domain" ]]; then
	echo "no domain specified";
	exit 1
fi
auto_config_first_domain="${auto_config_domain% *}"
location="/"
filename="${auto_config_name% *}"
if [[ ! -z "$auto_config_directory" ]]; then
	location="/$auto_config_directory/"
	filename="${filename% *}-$auto_config_directory"
fi

# create a temporary file to write stuff to
tmpfile=$(mktemp /tmp/abc-script.XXXXXX)
exec 3>"$tmpfile"
rm "$tmpfile"

ping -c 1 $auto_config_upstream > $tmpfile 2>&1
check_address=$(grep -m 1 "unknown host" $tmpfile)	

if [[ ! -z "$check_address" ]]; then
	echo "upstream \"$auto_config_upstream\" cannot be reached";
	exit 1
fi

if [[ "$filename" == "default" ]]; then
	filename="${filename% *}-custom"
fi

echo "
	server {
	    listen 80;
	    server_name $auto_config_domain;

	    location $location {
	        proxy_pass http://$auto_config_upstream;
	        proxy_set_header Host \$host;
	        proxy_set_header X-Real-IP \$remote_addr;
	        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
	        proxy_set_header X-Forwarded-Proto \$scheme;
	    }
	}
	" > /etc/nginx/conf.d/$filename.conf 

if [[ "$auto_config_ssl" == "1" ]]; then
	if [[ -z "$(cat  /etc/ssl/certs/dhparam.pem)" ]]; then
		echo "This will happen only once"
		openssl dhparam -out  /etc/ssl/certs/dhparam.pem 2048
		echo "DH parameters, generated"	
	fi

	location_start=$(grep -nm 1 "location $location {" /etc/nginx/conf.d/$filename.conf | cut -d : -f 1)
	location_end=$(grep -nm 1 "}" /etc/nginx/conf.d/$filename.conf | cut -d : -f 1)

	sed -i -e "${location_end}a\ \n\
		location "/.well-known/acme-challenge" { \n\
			default_type "text/plain"; \n\
			root /docker/challenge/$auto_config_first_domain; \n\
			allow all; \n\
		} \
			" /etc/nginx/conf.d/$filename.conf
	
	if [[ "$auto_config_ssl_source" == "letsencrypt" ]] \
		&& [[ -z "$(cat  /etc/letsencrypt/live/$auto_config_first_domain/fullchain.pem)" ]] \
		&& [[ -z "$(cat  /etc/letsencrypt/live/$auto_config_first_domain/privkey.pem)" ]]; then
		echo "Getting certificate for \"$auto_config_domain\""
		letsencrypt certonly -a webroot --webroot-path=/docker/challenge/$auto_config_first_domain -d ${auto_config_domain/ / -d }
		echo "Cetificates obtained"	
	fi
	
	if [[ -z "$(cat  /etc/letsencrypt/live/$auto_config_first_domain/fullchain.pem)" ]] \
		&& [[ -z "$(cat  /etc/letsencrypt/live/$auto_config_first_domain/privkey.pem)" ]]; then
		echo "error while getting certificate, skipping ssl configuration"	
	else
		echo "
			server {
				listen 443 ssl;
			    server_name $auto_config_domain;

				ssl_certificate /etc/letsencrypt/live/$auto_config_first_domain/fullchain.pem;
				ssl_certificate_key /etc/letsencrypt/live/$auto_config_first_domain/privkey.pem;
				ssl_session_cache shared:SSL:10m;
				ssl_session_timeout 5m;
				ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
				ssl_prefer_server_ciphers on;
				ssl_dhparam /etc/ssl/certs/dhparam.pem;
				ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
				ssl_stapling on;
				ssl_stapling_verify on;
				add_header Strict-Transport-Security max-age=15768000;

				location "/.well-known/acme-challenge" {
					default_type "text/plain";
					root /docker/challenge/$auto_config_first_domain;
					allow all;
				}

			    location $location {
			        proxy_pass http://$auto_config_upstream;
			        proxy_set_header Host \$host;
			        proxy_set_header X-Real-IP \$remote_addr;
			        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
			        proxy_set_header X-Forwarded-Proto \$scheme;
			    }
			}
			" > /etc/nginx/conf.d/$filename-ssl.conf

		if [[ "$auto_config_https_only" == "1" ]]; then

			sed -i -e "${location_start},${location_end}d" /etc/nginx/conf.d/$filename.conf

			location_start_acme=$(grep -nm 1 ".well-known/acme-challenge" /etc/nginx/conf.d/$filename.conf | cut -d : -f 1)
				location_end_acme_relative=$( tail --lines="+$location_start_acme" /etc/nginx/conf.d/$filename.conf | grep -nm 1 "}" | cut -d : -f 1)
				location_end_acme=$(($location_start_acme + $location_end_acme_relative))
			sed -i -e "${location_end_acme}i\ \n\
			return 301 https://\$host\$request_uri;" /etc/nginx/conf.d/$filename.conf
		fi
	fi
fi
}
configure_the_config