#!/bin/bash

while read line2; do unset "$line2"; done < <(compgen -A variable | grep "auto_config")

while getopts ":u:d:s:S:h:n:D:O:" opt; do
  case $opt in
    u)
      auto_config_upstream="$OPTARG";;
    O)
      auto_config_upstream_options="$OPTARG";;
    D)
      auto_config_domain="$OPTARG";;
    d)
      auto_config_directory="$OPTARG";;
    s)
      auto_config_ssl="$OPTARG";;
    S)
      auto_config_ssl_source="$OPTARG";;
    h)
      auto_config_https_only="$OPTARG";;
    n)
      auto_config_name="$OPTARG";;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

function configure_the_config(){
#set up variables and load defaults
[[ ! -z "$auto_config_directory" ]] || auto_config_directory="$DEFAULT_DIRECTORY" 
[[ ! -z "$auto_config_ssl" ]] || auto_config_ssl="$DEFAULT_SSL" 
[[ ! -z "$auto_config_ssl_source" ]] || auto_config_ssl_source="$DEFAULT_SSL_SOURCE"
[[ ! -z "$auto_config_https_only" ]] || auto_config_https_only="$DEFAULT_HTTPS_ONLY"

if [[ -z "$auto_config_upstream" ]]; then
	echo "no upstream specified";
	exit 1
else
	auto_config_upstream=$(sed -e "s/[[:space:]]\+/ /g" <<< $auto_config_upstream)
fi

if [[ -z "$auto_config_domain" ]]; then
	echo "no domain specified";
	exit 1
else
	auto_config_domain=$(sed -e "s/[[:space:]]\+/ /g" <<< $auto_config_domain)
fi

auto_config_first_domain="${auto_config_domain% *}"
location="/"
filename="${auto_config_first_domain% *}"
if [[ ! -z "$auto_config_directory" ]]; then
	location="/$auto_config_directory/"
fi

# create a temporary file to write stuff to
tmpfile=$(mktemp /tmp/abc-script.XXXXXX)
exec 3>"$tmpfile"
rm "$tmpfile"

oldIFS="$IFS" # store current value of IFS

IFS='|' read -r -a auto_config_upstream_array <<< "$auto_config_upstream" # turn to array and loop through
for single_upstream in "${auto_config_upstream_array[@]}"
do
	ping -c 1 "${single_upstream% *}" > $tmpfile 2>&1 # ping the host to check if it is valid
	check_address=$(grep -m 1 "unknown host" $tmpfile)	

	if [[ ! -z "$check_address" ]]; then
		echo "upstream \"${single_upstream% *}\" cannot be reached";
		exit 1
	fi
done

IFS="$oldIFS" # restore IFS

if [[ "$filename" == "default" ]]; then
	filename="${filename% *}-custom"
fi

# Add the upstream block
if [[ ! -z "$auto_config_upstream_options" ]]; then
	echo "
		upstream ${auto_config_name}_upstream  {
		    server ${auto_config_upstream//\|/;
			server };
			${auto_config_upstream_options//\|/;
			};
		}
		" > /etc/nginx/conf.d/"$filename"-"$auto_config_directory"-upstream.conf
else
	echo "
		upstream ${auto_config_name}_upstream  {
		    server ${auto_config_upstream//\|/;
			server };
		}
		" > /etc/nginx/conf.d/"$filename"-"$auto_config_directory"-upstream.conf
fi

# add the server block
if [[ ! -e /etc/nginx/conf.d/"$filename".conf ]]; then
	echo "
		server {
		    listen 80;
		    listen [::]:80;
		    server_name $auto_config_domain;

			location ^~ /.well-known/acme-challenge {
				default_type "text/plain";
				root /docker/challenge/$auto_config_first_domain;
				allow all;
			}

		}
		" > /etc/nginx/conf.d/"$filename".conf
fi

# add location and proxy details to server block
closingBracketLine=`expr $(wc -l /etc/nginx/conf.d/"$filename".conf | cut -d ' ' -f 1) - $(tac /etc/nginx/conf.d/"$filename".conf | grep -nm 1 } | cut -d : -f 1) + 1`

sed -i -e "${closingBracketLine}i\ \n\
			location $location { \n\
		        proxy_pass http://${auto_config_name}_upstream; \n\
		        proxy_set_header Host \$host; \n\
		        proxy_set_header X-Real-IP \$remote_addr; \n\
		        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for; \n\
		        proxy_set_header X-Forwarded-Proto \$scheme; \n\
		    } \
			" /etc/nginx/conf.d/$filename.conf

if [[ "$auto_config_ssl" == "1" ]]; then
	if [[ ! -e /etc/ssl/certs/dhparam.pem ]]; then
		echo "This will happen only once"
		openssl dhparam -out  /etc/ssl/certs/dhparam.pem 2048
		echo "DH parameters, generated"	
	fi

    letsencrypt_webroot=""
	letsencrypt_webroot="/docker/challenge/$auto_config_first_domain"
	mkdir -p $letsencrypt_webroot

	service nginx reload

	if [[ "$auto_config_ssl_source" == "letsencrypt" ]] \
		&& [[ ! -e /etc/letsencrypt/live/"$auto_config_first_domain"/fullchain.pem ]] \
		&& [[ ! -e /etc/letsencrypt/live/"$auto_config_first_domain"/privkey.pem ]]; then
		echo "Getting certificate for \"$auto_config_domain\""
		letsencrypt certonly -n -a webroot --webroot-path=$letsencrypt_webroot -d ${auto_config_domain/ / -d }
	elif [[ "$auto_config_ssl_source" == "letsencrypt" ]] \
		&& [[ -e /etc/letsencrypt/live/"$auto_config_first_domain"/fullchain.pem ]] \
		&& [[ -e /etc/letsencrypt/live/"$auto_config_first_domain"/privkey.pem ]]; then
		echo "Attempting to renew certificate for \"$auto_config_domain\""
		letsencrypt certonly --cert-name "$auto_config_first_domain" -n -a webroot --webroot-path=$letsencrypt_webroot -d ${auto_config_domain// / -d }
	fi
	
	if [[ ! -e /etc/letsencrypt/live/"$auto_config_first_domain"/fullchain.pem ]] \
		&& [[ ! -e /etc/letsencrypt/live/"$auto_config_first_domain"/privkey.pem ]]; then
		echo "ssl certificate error, skipping ssl configuration"	
	else
		if [[ ! -e /etc/nginx/conf.d/"$filename"-ssl.conf ]]; then
			echo "
				server {
					listen 443 ssl http2;
					listen [::]:443 ssl http2;
					server_name $auto_config_domain;

					ssl_certificate /etc/letsencrypt/live/$auto_config_first_domain/fullchain.pem;
					ssl_certificate_key /etc/letsencrypt/live/$auto_config_first_domain/privkey.pem;
					ssl_session_cache shared:SSL:10m;
					ssl_session_timeout 5m;
					ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
					ssl_prefer_server_ciphers on;
					ssl_dhparam /etc/ssl/certs/dhparam.pem;
					ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
					ssl_stapling on;
					ssl_stapling_verify on;
					add_header Strict-Transport-Security max-age=15768000;

					location ^~ /.well-known/acme-challenge {
						default_type "text/plain";
						root /docker/challenge/$auto_config_first_domain;
						allow all;
					}

				}
				" > /etc/nginx/conf.d/"$filename"-ssl.conf
		fi

		closingBracketLineSSL=`expr $(wc -l /etc/nginx/conf.d/"$filename"-ssl.conf | cut -d ' ' -f 1) - $(tac /etc/nginx/conf.d/"$filename"-ssl.conf | grep -nm 1 } | cut -d : -f 1) + 1`

		sed -i -e "${closingBracketLineSSL}i\ \n\
					location $location { \n\
				        proxy_pass http://${auto_config_name}_upstream; \n\
				        proxy_set_header Host \$host; \n\
				        proxy_set_header X-Real-IP \$remote_addr; \n\
				        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for; \n\
				        proxy_set_header X-Forwarded-Proto \$scheme; \n\
				    } \
					" /etc/nginx/conf.d/"$filename"-ssl.conf

		if [[ "$auto_config_https_only" == "1" ]]; then

			location_start=$(grep -nm 1 "location $location {" /etc/nginx/conf.d/$filename.conf | cut -d : -f 1)
			location_length=$(tail -n +$location_start /etc/nginx/conf.d/$filename.conf | grep -nm 1 "}" | cut -d : -f 1)
			location_end=$(expr $location_length + $location_start - 1)

			sed -i -e "$( expr $location_start + 1),$( expr $location_end - 1)d" /etc/nginx/conf.d/$filename.conf

			sed -i -e "${location_start}a\ \n\
			return 301 https://\$host\$request_uri;" /etc/nginx/conf.d/$filename.conf
		fi

		service nginx reload
	fi
fi
}
configure_the_config
