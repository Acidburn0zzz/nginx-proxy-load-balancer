// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNginxConfigFiles(t *testing.T) {
	t.Parallel()

	query := NginxConfigFiles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNginxConfigFilesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NginxConfigFile{}
	if err = randomize.Struct(seed, o, nginxConfigFileDBTypes, true, nginxConfigFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NginxConfigFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNginxConfigFilesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NginxConfigFile{}
	if err = randomize.Struct(seed, o, nginxConfigFileDBTypes, true, nginxConfigFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := NginxConfigFiles().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NginxConfigFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNginxConfigFilesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NginxConfigFile{}
	if err = randomize.Struct(seed, o, nginxConfigFileDBTypes, true, nginxConfigFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NginxConfigFileSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NginxConfigFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNginxConfigFilesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NginxConfigFile{}
	if err = randomize.Struct(seed, o, nginxConfigFileDBTypes, true, nginxConfigFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NginxConfigFileExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if NginxConfigFile exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NginxConfigFileExists to return true, but got false.")
	}
}

func testNginxConfigFilesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NginxConfigFile{}
	if err = randomize.Struct(seed, o, nginxConfigFileDBTypes, true, nginxConfigFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	nginxConfigFileFound, err := FindNginxConfigFile(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if nginxConfigFileFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNginxConfigFilesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NginxConfigFile{}
	if err = randomize.Struct(seed, o, nginxConfigFileDBTypes, true, nginxConfigFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = NginxConfigFiles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testNginxConfigFilesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NginxConfigFile{}
	if err = randomize.Struct(seed, o, nginxConfigFileDBTypes, true, nginxConfigFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := NginxConfigFiles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNginxConfigFilesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nginxConfigFileOne := &NginxConfigFile{}
	nginxConfigFileTwo := &NginxConfigFile{}
	if err = randomize.Struct(seed, nginxConfigFileOne, nginxConfigFileDBTypes, false, nginxConfigFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile struct: %s", err)
	}
	if err = randomize.Struct(seed, nginxConfigFileTwo, nginxConfigFileDBTypes, false, nginxConfigFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nginxConfigFileOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nginxConfigFileTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NginxConfigFiles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNginxConfigFilesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	nginxConfigFileOne := &NginxConfigFile{}
	nginxConfigFileTwo := &NginxConfigFile{}
	if err = randomize.Struct(seed, nginxConfigFileOne, nginxConfigFileDBTypes, false, nginxConfigFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile struct: %s", err)
	}
	if err = randomize.Struct(seed, nginxConfigFileTwo, nginxConfigFileDBTypes, false, nginxConfigFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nginxConfigFileOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nginxConfigFileTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NginxConfigFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func nginxConfigFileBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *NginxConfigFile) error {
	*o = NginxConfigFile{}
	return nil
}

func nginxConfigFileAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *NginxConfigFile) error {
	*o = NginxConfigFile{}
	return nil
}

func nginxConfigFileAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *NginxConfigFile) error {
	*o = NginxConfigFile{}
	return nil
}

func nginxConfigFileBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NginxConfigFile) error {
	*o = NginxConfigFile{}
	return nil
}

func nginxConfigFileAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NginxConfigFile) error {
	*o = NginxConfigFile{}
	return nil
}

func nginxConfigFileBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NginxConfigFile) error {
	*o = NginxConfigFile{}
	return nil
}

func nginxConfigFileAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NginxConfigFile) error {
	*o = NginxConfigFile{}
	return nil
}

func nginxConfigFileBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NginxConfigFile) error {
	*o = NginxConfigFile{}
	return nil
}

func nginxConfigFileAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NginxConfigFile) error {
	*o = NginxConfigFile{}
	return nil
}

func testNginxConfigFilesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &NginxConfigFile{}
	o := &NginxConfigFile{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, nginxConfigFileDBTypes, false); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile object: %s", err)
	}

	AddNginxConfigFileHook(boil.BeforeInsertHook, nginxConfigFileBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	nginxConfigFileBeforeInsertHooks = []NginxConfigFileHook{}

	AddNginxConfigFileHook(boil.AfterInsertHook, nginxConfigFileAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	nginxConfigFileAfterInsertHooks = []NginxConfigFileHook{}

	AddNginxConfigFileHook(boil.AfterSelectHook, nginxConfigFileAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	nginxConfigFileAfterSelectHooks = []NginxConfigFileHook{}

	AddNginxConfigFileHook(boil.BeforeUpdateHook, nginxConfigFileBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	nginxConfigFileBeforeUpdateHooks = []NginxConfigFileHook{}

	AddNginxConfigFileHook(boil.AfterUpdateHook, nginxConfigFileAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	nginxConfigFileAfterUpdateHooks = []NginxConfigFileHook{}

	AddNginxConfigFileHook(boil.BeforeDeleteHook, nginxConfigFileBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	nginxConfigFileBeforeDeleteHooks = []NginxConfigFileHook{}

	AddNginxConfigFileHook(boil.AfterDeleteHook, nginxConfigFileAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	nginxConfigFileAfterDeleteHooks = []NginxConfigFileHook{}

	AddNginxConfigFileHook(boil.BeforeUpsertHook, nginxConfigFileBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	nginxConfigFileBeforeUpsertHooks = []NginxConfigFileHook{}

	AddNginxConfigFileHook(boil.AfterUpsertHook, nginxConfigFileAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	nginxConfigFileAfterUpsertHooks = []NginxConfigFileHook{}
}

func testNginxConfigFilesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NginxConfigFile{}
	if err = randomize.Struct(seed, o, nginxConfigFileDBTypes, true, nginxConfigFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NginxConfigFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNginxConfigFilesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NginxConfigFile{}
	if err = randomize.Struct(seed, o, nginxConfigFileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(nginxConfigFileColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := NginxConfigFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNginxConfigFileToOneServiceUsingService(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local NginxConfigFile
	var foreign Service

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, nginxConfigFileDBTypes, true, nginxConfigFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serviceDBTypes, false, serviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Service struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ServiceID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Service().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NginxConfigFileSlice{&local}
	if err = local.L.LoadService(ctx, tx, false, (*[]*NginxConfigFile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Service == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Service = nil
	if err = local.L.LoadService(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Service == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNginxConfigFileToOneSetOpServiceUsingService(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NginxConfigFile
	var b, c Service

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, nginxConfigFileDBTypes, false, strmangle.SetComplement(nginxConfigFilePrimaryKeyColumns, nginxConfigFileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serviceDBTypes, false, strmangle.SetComplement(servicePrimaryKeyColumns, serviceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serviceDBTypes, false, strmangle.SetComplement(servicePrimaryKeyColumns, serviceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Service{&b, &c} {
		err = a.SetService(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Service != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.NginxConfigFiles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ServiceID, x.ID) {
			t.Error("foreign key was wrong value", a.ServiceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServiceID))
		reflect.Indirect(reflect.ValueOf(&a.ServiceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ServiceID, x.ID) {
			t.Error("foreign key was wrong value", a.ServiceID, x.ID)
		}
	}
}

func testNginxConfigFileToOneRemoveOpServiceUsingService(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NginxConfigFile
	var b Service

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, nginxConfigFileDBTypes, false, strmangle.SetComplement(nginxConfigFilePrimaryKeyColumns, nginxConfigFileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serviceDBTypes, false, strmangle.SetComplement(servicePrimaryKeyColumns, serviceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetService(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveService(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Service().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Service != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ServiceID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.NginxConfigFiles) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testNginxConfigFilesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NginxConfigFile{}
	if err = randomize.Struct(seed, o, nginxConfigFileDBTypes, true, nginxConfigFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNginxConfigFilesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NginxConfigFile{}
	if err = randomize.Struct(seed, o, nginxConfigFileDBTypes, true, nginxConfigFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NginxConfigFileSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNginxConfigFilesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NginxConfigFile{}
	if err = randomize.Struct(seed, o, nginxConfigFileDBTypes, true, nginxConfigFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NginxConfigFiles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	nginxConfigFileDBTypes = map[string]string{`ID`: `INTEGER`, `ServiceID`: `INTEGER`, `Type`: `TEXT`, `Path`: `TEXT`, `LastModified`: `DATETIME`}
	_                      = bytes.MinRead
)

func testNginxConfigFilesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(nginxConfigFilePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(nginxConfigFileColumns) == len(nginxConfigFilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NginxConfigFile{}
	if err = randomize.Struct(seed, o, nginxConfigFileDBTypes, true, nginxConfigFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NginxConfigFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nginxConfigFileDBTypes, true, nginxConfigFilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNginxConfigFilesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(nginxConfigFileColumns) == len(nginxConfigFilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NginxConfigFile{}
	if err = randomize.Struct(seed, o, nginxConfigFileDBTypes, true, nginxConfigFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NginxConfigFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nginxConfigFileDBTypes, true, nginxConfigFilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NginxConfigFile struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(nginxConfigFileColumns, nginxConfigFilePrimaryKeyColumns) {
		fields = nginxConfigFileColumns
	} else {
		fields = strmangle.SetComplement(
			nginxConfigFileColumns,
			nginxConfigFilePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NginxConfigFileSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
