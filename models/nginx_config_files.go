// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// NginxConfigFile is an object representing the database table.
type NginxConfigFile struct {
	ID           int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ServiceID    null.Int64 `boil:"service_id" json:"service_id,omitempty" toml:"service_id" yaml:"service_id,omitempty"`
	Type         string     `boil:"type" json:"type" toml:"type" yaml:"type"`
	Path         string     `boil:"path" json:"path" toml:"path" yaml:"path"`
	LastModified time.Time  `boil:"last_modified" json:"last_modified" toml:"last_modified" yaml:"last_modified"`

	R *nginxConfigFileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L nginxConfigFileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NginxConfigFileColumns = struct {
	ID           string
	ServiceID    string
	Type         string
	Path         string
	LastModified string
}{
	ID:           "id",
	ServiceID:    "service_id",
	Type:         "type",
	Path:         "path",
	LastModified: "last_modified",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var NginxConfigFileWhere = struct {
	ID           whereHelperint64
	ServiceID    whereHelpernull_Int64
	Type         whereHelperstring
	Path         whereHelperstring
	LastModified whereHelpertime_Time
}{
	ID:           whereHelperint64{field: `id`},
	ServiceID:    whereHelpernull_Int64{field: `service_id`},
	Type:         whereHelperstring{field: `type`},
	Path:         whereHelperstring{field: `path`},
	LastModified: whereHelpertime_Time{field: `last_modified`},
}

// NginxConfigFileRels is where relationship names are stored.
var NginxConfigFileRels = struct {
	Service string
}{
	Service: "Service",
}

// nginxConfigFileR is where relationships are stored.
type nginxConfigFileR struct {
	Service *Service
}

// NewStruct creates a new relationship struct
func (*nginxConfigFileR) NewStruct() *nginxConfigFileR {
	return &nginxConfigFileR{}
}

// nginxConfigFileL is where Load methods for each relationship are stored.
type nginxConfigFileL struct{}

var (
	nginxConfigFileColumns               = []string{"id", "service_id", "type", "path", "last_modified"}
	nginxConfigFileColumnsWithoutDefault = []string{"service_id", "type", "path", "last_modified"}
	nginxConfigFileColumnsWithDefault    = []string{"id"}
	nginxConfigFilePrimaryKeyColumns     = []string{"id"}
)

type (
	// NginxConfigFileSlice is an alias for a slice of pointers to NginxConfigFile.
	// This should generally be used opposed to []NginxConfigFile.
	NginxConfigFileSlice []*NginxConfigFile
	// NginxConfigFileHook is the signature for custom NginxConfigFile hook methods
	NginxConfigFileHook func(context.Context, boil.ContextExecutor, *NginxConfigFile) error

	nginxConfigFileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	nginxConfigFileType                 = reflect.TypeOf(&NginxConfigFile{})
	nginxConfigFileMapping              = queries.MakeStructMapping(nginxConfigFileType)
	nginxConfigFilePrimaryKeyMapping, _ = queries.BindMapping(nginxConfigFileType, nginxConfigFileMapping, nginxConfigFilePrimaryKeyColumns)
	nginxConfigFileInsertCacheMut       sync.RWMutex
	nginxConfigFileInsertCache          = make(map[string]insertCache)
	nginxConfigFileUpdateCacheMut       sync.RWMutex
	nginxConfigFileUpdateCache          = make(map[string]updateCache)
	nginxConfigFileUpsertCacheMut       sync.RWMutex
	nginxConfigFileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var nginxConfigFileBeforeInsertHooks []NginxConfigFileHook
var nginxConfigFileBeforeUpdateHooks []NginxConfigFileHook
var nginxConfigFileBeforeDeleteHooks []NginxConfigFileHook
var nginxConfigFileBeforeUpsertHooks []NginxConfigFileHook

var nginxConfigFileAfterInsertHooks []NginxConfigFileHook
var nginxConfigFileAfterSelectHooks []NginxConfigFileHook
var nginxConfigFileAfterUpdateHooks []NginxConfigFileHook
var nginxConfigFileAfterDeleteHooks []NginxConfigFileHook
var nginxConfigFileAfterUpsertHooks []NginxConfigFileHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NginxConfigFile) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nginxConfigFileBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NginxConfigFile) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nginxConfigFileBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NginxConfigFile) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nginxConfigFileBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NginxConfigFile) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nginxConfigFileBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NginxConfigFile) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nginxConfigFileAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NginxConfigFile) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nginxConfigFileAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NginxConfigFile) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nginxConfigFileAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NginxConfigFile) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nginxConfigFileAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NginxConfigFile) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nginxConfigFileAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNginxConfigFileHook registers your hook function for all future operations.
func AddNginxConfigFileHook(hookPoint boil.HookPoint, nginxConfigFileHook NginxConfigFileHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		nginxConfigFileBeforeInsertHooks = append(nginxConfigFileBeforeInsertHooks, nginxConfigFileHook)
	case boil.BeforeUpdateHook:
		nginxConfigFileBeforeUpdateHooks = append(nginxConfigFileBeforeUpdateHooks, nginxConfigFileHook)
	case boil.BeforeDeleteHook:
		nginxConfigFileBeforeDeleteHooks = append(nginxConfigFileBeforeDeleteHooks, nginxConfigFileHook)
	case boil.BeforeUpsertHook:
		nginxConfigFileBeforeUpsertHooks = append(nginxConfigFileBeforeUpsertHooks, nginxConfigFileHook)
	case boil.AfterInsertHook:
		nginxConfigFileAfterInsertHooks = append(nginxConfigFileAfterInsertHooks, nginxConfigFileHook)
	case boil.AfterSelectHook:
		nginxConfigFileAfterSelectHooks = append(nginxConfigFileAfterSelectHooks, nginxConfigFileHook)
	case boil.AfterUpdateHook:
		nginxConfigFileAfterUpdateHooks = append(nginxConfigFileAfterUpdateHooks, nginxConfigFileHook)
	case boil.AfterDeleteHook:
		nginxConfigFileAfterDeleteHooks = append(nginxConfigFileAfterDeleteHooks, nginxConfigFileHook)
	case boil.AfterUpsertHook:
		nginxConfigFileAfterUpsertHooks = append(nginxConfigFileAfterUpsertHooks, nginxConfigFileHook)
	}
}

// One returns a single nginxConfigFile record from the query.
func (q nginxConfigFileQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NginxConfigFile, error) {
	o := &NginxConfigFile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for nginx_config_files")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NginxConfigFile records from the query.
func (q nginxConfigFileQuery) All(ctx context.Context, exec boil.ContextExecutor) (NginxConfigFileSlice, error) {
	var o []*NginxConfigFile

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NginxConfigFile slice")
	}

	if len(nginxConfigFileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NginxConfigFile records in the query.
func (q nginxConfigFileQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count nginx_config_files rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q nginxConfigFileQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if nginx_config_files exists")
	}

	return count > 0, nil
}

// Service pointed to by the foreign key.
func (o *NginxConfigFile) Service(mods ...qm.QueryMod) serviceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ServiceID),
	}

	queryMods = append(queryMods, mods...)

	query := Services(queryMods...)
	queries.SetFrom(query.Query, "\"services\"")

	return query
}

// LoadService allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (nginxConfigFileL) LoadService(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNginxConfigFile interface{}, mods queries.Applicator) error {
	var slice []*NginxConfigFile
	var object *NginxConfigFile

	if singular {
		object = maybeNginxConfigFile.(*NginxConfigFile)
	} else {
		slice = *maybeNginxConfigFile.(*[]*NginxConfigFile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &nginxConfigFileR{}
		}
		if !queries.IsNil(object.ServiceID) {
			args = append(args, object.ServiceID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &nginxConfigFileR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ServiceID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ServiceID) {
				args = append(args, obj.ServiceID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`services`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Service")
	}

	var resultSlice []*Service
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Service")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for services")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for services")
	}

	if len(nginxConfigFileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Service = foreign
		if foreign.R == nil {
			foreign.R = &serviceR{}
		}
		foreign.R.NginxConfigFiles = append(foreign.R.NginxConfigFiles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ServiceID, foreign.ID) {
				local.R.Service = foreign
				if foreign.R == nil {
					foreign.R = &serviceR{}
				}
				foreign.R.NginxConfigFiles = append(foreign.R.NginxConfigFiles, local)
				break
			}
		}
	}

	return nil
}

// SetService of the nginxConfigFile to the related item.
// Sets o.R.Service to related.
// Adds o to related.R.NginxConfigFiles.
func (o *NginxConfigFile) SetService(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Service) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"nginx_config_files\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"service_id"}),
		strmangle.WhereClause("\"", "\"", 0, nginxConfigFilePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ServiceID, related.ID)
	if o.R == nil {
		o.R = &nginxConfigFileR{
			Service: related,
		}
	} else {
		o.R.Service = related
	}

	if related.R == nil {
		related.R = &serviceR{
			NginxConfigFiles: NginxConfigFileSlice{o},
		}
	} else {
		related.R.NginxConfigFiles = append(related.R.NginxConfigFiles, o)
	}

	return nil
}

// RemoveService relationship.
// Sets o.R.Service to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *NginxConfigFile) RemoveService(ctx context.Context, exec boil.ContextExecutor, related *Service) error {
	var err error

	queries.SetScanner(&o.ServiceID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("service_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Service = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.NginxConfigFiles {
		if queries.Equal(o.ServiceID, ri.ServiceID) {
			continue
		}

		ln := len(related.R.NginxConfigFiles)
		if ln > 1 && i < ln-1 {
			related.R.NginxConfigFiles[i] = related.R.NginxConfigFiles[ln-1]
		}
		related.R.NginxConfigFiles = related.R.NginxConfigFiles[:ln-1]
		break
	}
	return nil
}

// NginxConfigFiles retrieves all the records using an executor.
func NginxConfigFiles(mods ...qm.QueryMod) nginxConfigFileQuery {
	mods = append(mods, qm.From("\"nginx_config_files\""))
	return nginxConfigFileQuery{NewQuery(mods...)}
}

// FindNginxConfigFile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNginxConfigFile(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*NginxConfigFile, error) {
	nginxConfigFileObj := &NginxConfigFile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"nginx_config_files\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, nginxConfigFileObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from nginx_config_files")
	}

	return nginxConfigFileObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NginxConfigFile) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no nginx_config_files provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nginxConfigFileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	nginxConfigFileInsertCacheMut.RLock()
	cache, cached := nginxConfigFileInsertCache[key]
	nginxConfigFileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			nginxConfigFileColumns,
			nginxConfigFileColumnsWithDefault,
			nginxConfigFileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(nginxConfigFileType, nginxConfigFileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(nginxConfigFileType, nginxConfigFileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"nginx_config_files\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"nginx_config_files\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"nginx_config_files\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, nginxConfigFilePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into nginx_config_files")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == nginxConfigFileMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for nginx_config_files")
	}

CacheNoHooks:
	if !cached {
		nginxConfigFileInsertCacheMut.Lock()
		nginxConfigFileInsertCache[key] = cache
		nginxConfigFileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NginxConfigFile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NginxConfigFile) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	nginxConfigFileUpdateCacheMut.RLock()
	cache, cached := nginxConfigFileUpdateCache[key]
	nginxConfigFileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			nginxConfigFileColumns,
			nginxConfigFilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update nginx_config_files, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"nginx_config_files\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, nginxConfigFilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(nginxConfigFileType, nginxConfigFileMapping, append(wl, nginxConfigFilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update nginx_config_files row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for nginx_config_files")
	}

	if !cached {
		nginxConfigFileUpdateCacheMut.Lock()
		nginxConfigFileUpdateCache[key] = cache
		nginxConfigFileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q nginxConfigFileQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for nginx_config_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for nginx_config_files")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NginxConfigFileSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nginxConfigFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"nginx_config_files\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, nginxConfigFilePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in nginxConfigFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all nginxConfigFile")
	}
	return rowsAff, nil
}

// Delete deletes a single NginxConfigFile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NginxConfigFile) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NginxConfigFile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), nginxConfigFilePrimaryKeyMapping)
	sql := "DELETE FROM \"nginx_config_files\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from nginx_config_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for nginx_config_files")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q nginxConfigFileQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no nginxConfigFileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nginx_config_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for nginx_config_files")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NginxConfigFileSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NginxConfigFile slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(nginxConfigFileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nginxConfigFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"nginx_config_files\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, nginxConfigFilePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nginxConfigFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for nginx_config_files")
	}

	if len(nginxConfigFileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NginxConfigFile) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNginxConfigFile(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NginxConfigFileSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NginxConfigFileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nginxConfigFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"nginx_config_files\".* FROM \"nginx_config_files\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, nginxConfigFilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NginxConfigFileSlice")
	}

	*o = slice

	return nil
}

// NginxConfigFileExists checks if the NginxConfigFile row exists.
func NginxConfigFileExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"nginx_config_files\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if nginx_config_files exists")
	}

	return exists, nil
}
